{"version":3,"file":"app/app-wp49fe4c1d7286cb78dc57.js","mappings":"mBAEA,MAAMA,EAAqBC,SAASC,iBAAiB,sBAGrD,GAAIF,EAAmBG,OAAQ,CAC7B,MAAMC,EACJC,WAAAA,CAAYC,GACVC,KAAKD,QAAUA,EACfC,KAAKC,UAAYF,EAAQG,QAAQC,WACjCH,KAAKI,aAAeL,EAAQM,YAC5BL,KAAKM,WAAaN,KAAKI,aAAaG,MAAM,EAAGP,KAAKC,WAAa,MAC/DD,KAAKQ,YAAa,CACpB,CAEAC,IAAAA,CAAKC,IACEA,EAAc,MAAQV,KAAKQ,YAAgBE,GAAe,KAAOV,KAAKQ,cACzER,KAAKD,QAAQM,YAAcL,KAAKQ,WAAaR,KAAKI,aAAeJ,KAAKM,WACtEN,KAAKQ,YAAcR,KAAKQ,WAE5B,EAIF,MAAMG,EAAeC,MAAMC,KAAKpB,GAAoBM,GAAW,IAAIF,EAAWE,KAG9E,SAASe,IACPH,EAAaI,SAAQhB,IACnBA,EAAQU,KAAKO,OAAOC,WAAW,GAEnC,CAGAH,IACAE,OAAOE,iBAAiB,SAAUJ,EACpC,CAoF0B,IAjF1B,MACEhB,WAAAA,GACEE,KAAKmB,sBAAwBzB,SAAS0B,cAAc,0BACpDpB,KAAKqB,KAAO3B,SAAS4B,eAAe,eACpCtB,KAAKuB,WAAavB,KAAKqB,KAAK1B,iBAAiB,2BAC5CK,KAAKuB,WAAWR,SAAQS,IACtB,IAAIC,EAASzB,KAAK0B,sBACbC,EAAQH,EAAGJ,cAAc,KAEzBQ,EAAQD,EAAKE,WAAU,GAEvBC,EAAOpC,SAASqC,cAAc,QAClCD,EAAKE,UAAUC,IAAI,oBACnBH,EAAKI,YAAYN,GACjBE,EAAKI,YAAYT,GAEjBD,EAAGW,aAAaL,EAAMH,GACtB3B,KAAKoC,eAAiB1C,SAAS4B,eAAe,kBAC9CtB,KAAKqC,QAAQ,GAInB,CAEAA,MAAAA,GACErC,KAAKoC,eAAelB,iBAAiB,QAAUlB,KAAKsC,sBAAsBC,KAAKvC,MACjF,CACDwC,cAAAA,GACGxC,KAAKqB,KAAKW,UAAUP,OAAO,SAC7B,CAEAC,mBAAAA,GACE,IAAID,EAAS/B,SAASqC,cAAc,OAChCU,EAAMzC,KAAK0C,YAMf,OAJAjB,EAAOO,UAAUC,IAAI,UACrBR,EAAOS,YAAYO,GAEnBhB,EAAOP,iBAAiB,QAASlB,KAAKwC,eAAeD,KAAKvC,OACnDyB,CACT,CAEAiB,SAAAA,GAEF,IAAKC,EAAIjD,SAASqC,cAAc,KAO5B,OANJY,EAAEC,aAAa,cAAe,QAC9BD,EAAEC,aAAa,gBAAiB,KAChCD,EAAEX,UAAUC,IAAI,0BAChBU,EAAEX,UAAUC,IAAI,QAGLU,CACT,CAEDH,cAAAA,CAAeK,GACZA,EAAEC,iBACD,IAAI/C,EAAU8C,EAAEE,OAAOC,QAAQ,WAC9BjD,EAAQiC,UAAUP,OAAO,QACZ1B,EAAQkD,WAAWA,WACR7B,cAAc,aAC7BY,UAAUP,OAAO,UAG9B,CAEAa,qBAAAA,CAAsBO,GACpB,IAAI9C,EAAU8C,EAAEE,OAAOC,QAAQ,mBAC3BE,EAAsBnD,EAAQiC,UAAUmB,SAAS,QAAU,SAAW,OACtEC,EAAa,kBAAiBF,IAClCnD,EAAQ6C,aAAa,QAASQ,GAEH,SAAxBF,EACDlD,KAAKmB,sBAAsBa,UAAUC,IAAI,WAEzCjC,KAAKmB,sBAAsBa,UAAUqB,OAAO,UAEhD,E","sources":["webpack://_new/./src/app/js/app.js"],"sourcesContent":["import '../scss/app.scss'; // Importing SCSS file\n // Get elements with the data-mobile-trim attribute\nconst mobileTrimElements = document.querySelectorAll('[data-mobile-trim]');\n\n// Check if there are elements to process\nif (mobileTrimElements.length) {\n  class MobileTrim {\n    constructor(element) {\n      this.element = element;\n      this.trimCount = element.dataset.mobileTrim;\n      this.originalText = element.textContent;\n      this.mobileText = this.originalText.slice(0, this.trimCount) + '...';\n      this.mobileMode = false;\n    }\n\n    trim(windowWidth) {\n      if ((windowWidth < 768 && !this.mobileMode) || (windowWidth >= 768 && this.mobileMode)) {\n        this.element.textContent = this.mobileMode ? this.originalText : this.mobileText;\n        this.mobileMode = !this.mobileMode;\n      }\n    }\n  }\n\n  // Create instances of MobileTrim class and store them in an array\n  const trim_classes = Array.from(mobileTrimElements, element => new MobileTrim(element));\n\n  // Function to update trimming\n  function updateMobileTrim() {\n    trim_classes.forEach(element => {\n      element.trim(window.innerWidth);\n    });\n  }\n\n  // Initialize trimming and set up the event listener for window resize\n  updateMobileTrim();\n  window.addEventListener('resize', updateMobileTrim);\n}\n\n\nclass Mobile_Menu_Handler{\n  constructor(){\n    this.mobile_menu_container = document.querySelector('.mobile-menu-container');\n    this.menu = document.getElementById('mobile-menu');\n    this.parent_lis = this.menu.querySelectorAll('.menu-item-has-children');\n     this.parent_lis.forEach(li => {\n       let toggle = this.createToggleElement();\n        let link  = li.querySelector('a');\n        // clone link \n        let clone = link.cloneNode(true);\n        // link.remove()\n        let span = document.createElement('span');\n        span.classList.add('mobile-menu-item');\n        span.appendChild(clone);\n        span.appendChild(toggle);\n        // span replace link\n        li.replaceChild(span, link);\n        this.hamburger_menu = document.getElementById('hamburger-menu');\n        this.events();\n\n        \n     });\n  }\n\n  events(){\n    this.hamburger_menu.addEventListener('click',  this.toggle_hamburger_menu.bind(this));\n  }\n toggle_submenu(){\n    this.menu.classList.toggle('hidden');\n  }\n\n  createToggleElement(){\n    let toggle = document.createElement('div');\n    let svg = this.createSVG();\n   \n    toggle.classList.add('toggle');\n    toggle.appendChild(svg);\n\n    toggle.addEventListener('click', this.toggle_submenu.bind(this));\n    return toggle;\n  }\n\n  createSVG() {\n//  <i class=\"x-anchor-sub-indicator\" data-x-skip-scroll=\"true\" aria-hidden=\"true\" data-x-icon-s=\"\"></i>\nlet  i = document.createElement('i');\ni.setAttribute('aria-hidden', 'true');\ni.setAttribute('data-x-icon-s', '');\ni.classList.add('x-anchor-sub-indicator');\ni.classList.add('icon');\n\n\n    return i;\n  }\n  \n toggle_submenu(e){\n    e.preventDefault();\n     let element = e.target.closest('.toggle');\n      element.classList.toggle('open');\n      let parent = element.parentNode.parentNode;\n        let children = parent.querySelector('.sub-menu');\n      children.classList.toggle('visible');\n\n     \n  }\n\n  toggle_hamburger_menu(e){\n    let element = e.target.closest('.hamburger-menu');\n    let open_or_close_state = element.classList.contains('open') ? 'closed' : 'open';\n    let new_class = `hamburger-menu ${open_or_close_state}`;\n    element.setAttribute('class', new_class);\n\n    if(open_or_close_state === 'open'){\n      this.mobile_menu_container.classList.add('visible');\n    } else {\n      this.mobile_menu_container.classList.remove('visible');\n    }\n  }\n\n}\n\n\nlet mobile_menu_handler = new Mobile_Menu_Handler();"],"names":["mobileTrimElements","document","querySelectorAll","length","MobileTrim","constructor","element","this","trimCount","dataset","mobileTrim","originalText","textContent","mobileText","slice","mobileMode","trim","windowWidth","trim_classes","Array","from","updateMobileTrim","forEach","window","innerWidth","addEventListener","mobile_menu_container","querySelector","menu","getElementById","parent_lis","li","toggle","createToggleElement","link","clone","cloneNode","span","createElement","classList","add","appendChild","replaceChild","hamburger_menu","events","toggle_hamburger_menu","bind","toggle_submenu","svg","createSVG","i","setAttribute","e","preventDefault","target","closest","parentNode","open_or_close_state","contains","new_class","remove"],"sourceRoot":""}
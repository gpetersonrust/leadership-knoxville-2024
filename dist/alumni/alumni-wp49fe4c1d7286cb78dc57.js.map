{"version":3,"file":"alumni/alumni-wp49fe4c1d7286cb78dc57.js","mappings":"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","sources":["webpack://_new/./src/alumni/js/alumni.js"],"sourcesContent":["class AlumniFilterController {\n    constructor(screen_version_class, mobile_version = false) {\n        // DOM Elements\n        this.screen_version_class = document.getElementById(screen_version_class);\n        this.alumniContainer = this.screen_version_class.querySelector('.leadership-alumni');\n        this.school_filter = this.screen_version_class.querySelector('#school-filter');\n        this.no_school_filter = this.screen_version_class.querySelector('#no-school-filter');\n        this.filterButtons = [...this.screen_version_class.querySelectorAll('.alumni-filter-button')];\n        this.filterModeButtons = [...this.screen_version_class.querySelectorAll('.alumni-filter-mode-button')];\n        this.pageLogo = this.screen_version_class.querySelector('#page-logo').querySelector('img');\n        this.alumniContainer = this.screen_version_class.querySelector('.leadership-alumni');\n        this.previous_active_button = this.screen_version_class.querySelector('.alumni-filter-button.active');\n        this.previous_active_mode_button = this.screen_version_class.querySelector('.alumni-filter-mode-button.active');\n        this.school_filter = this.screen_version_class.querySelector('.School');\n\n       this.mobile_version = mobile_version;\n\n        // Variables\n        this.filterMode = 'Year';\n        this.filterGroup = \"flagship-program\";\n        this.filteredAlumni = [];\n        this.alumnis = [];\n        this.isNoSchoolFilter = true;\n        \n\n        // Logos for different filter groups\n        this.logos = {\n            'flagship-program': `${site_url}/wp-content/uploads/2023/10/Lead-Knox-Flagship-RGB.jpg`,\n            'youth-leadership-knoxville': `${site_url}/wp-content/uploads/2023/10/Lead-Knox-Youth-RGB.jpg`,\n            'introduction-knoxville': `${site_url}/wp-content/uploads/2023/10/Lead-Knox-Intro-RGB.jpg`,\n            'leadership-knoxville-scholars': `${site_url}/wp-content/uploads/2023/10/Lead-Knox-Scholars-RGB.jpg`,\n            'encore': `${site_url}/wp-content/uploads/2023/10/Lead-Knox-Encore-RGB.jpg`\n        };\n\n        // Event Handling\n        this.events();\n       this.init();\n    } \n\n    async init(){\n        // Display the spinner\n        this.displaySpinner();\n        await this.fetchAlumniData(this.filterGroup);\n         \n        this.filterAlumni();\n\n    }\n\n\n    screen_size_mode_handler(){\n        // screen sizes are as followed 480, 767, 1200, 1800\n        let mode = 'mobile';\n        let rows = 1;\n        if(window.innerWidth >= 480 && window.innerWidth < 767){\n            mode = 'tablet';\n        } else if(window.innerWidth >= 767 && window.innerWidth < 1200){\n            mode = 'desktop';\n        } else if (window.innerWidth >= 1200 && window.innerWidth < 1800 ||  window.innerWidth >= 1800){\n            mode = 'large-desktop';\n        }  \n\n        if(mode == 'mobile'){\n            rows = 2;\n        }\n        if(mode == 'tablet'){\n            rows = 2;\n        }\n        if(mode == 'desktop'){\n            rows = 3;\n        }\n        if(mode == 'large-desktop'){\n            rows = 5;\n        }\n\n     \n\n         this.screen_size_mode = mode;\n            this.screen_size_rows = rows;\n      return this;\n\n    }\n\n    // Event listeners setup\n    events() {\n        this.filterButtons.forEach(button => {\n            button.addEventListener('click', async () => {\n                // Display the spinner\n                this.displaySpinner();\n\n                 \n                this.filterGroup = button.id;\n                \n                \n                // Check if alumni data is already fetched\n                if (this.alumnis[this.filterGroup] == undefined) {\n\n                    await this.fetchAlumniData(this.filterGroup);\n                }\n           \n\n                // Handle specific cases for 'youth-leadership-knoxville' filter group\n                if (this.filterGroup == 'youth-leadership-knoxville') {\n                    this.school_filter.style.display = 'block';\n\n                    if( !this.mobile_version){\n                    this.school_filter.previousElementSibling.classList.add('alpha-middle');\n                    }\n                 \n                    \n\n                    this.isNoSchoolFilter = true;\n                } else {\n                    if (this.isNoSchoolFilter) {\n                      \n                        this.school_filter.style.display = 'none';\n                       \n                        this.isNoSchoolFilter = false;\n                        if( !this.mobile_version){\n                        this.school_filter.previousElementSibling.classList.remove('alpha-middle');\n                        }\n                       \n\n                      \n                        if (this.filterMode == 'School') {\n                            this.filterMode = 'Year';\n                            this.displayAlumni();\n                        }\n\n                       \n                    }\n                }\n\n                // Update UI\n                this.previous_active_button.classList.remove('active');\n                button.classList.add('active');\n                this.previous_active_button = button;\n      \n                this.filterAlumni();\n            })\n        });\n\n        this.filterModeButtons.forEach(button => {\n\n            button.addEventListener('click', () => {\n\n              \n                this.filterMode = button.id;\n                this.previous_active_mode_button.classList.remove('active');\n                button.classList.add('active');\n                this.previous_active_mode_button = button;\n              \n                button.classList.add('active');\n                this.filterAlumni();\n            })\n        });\n\n        // screen resize event that runs the filterAlumni function to update the number of items per row based on the screen size\n        window.addEventListener('resize', () => {\n            let old_screen_size_mode = this.screen_size_mode;\n            if(old_screen_size_mode != this.screen_size_mode_handler().screen_size_mode){\n            this.filterAlumni();\n            }\n        });\n    }\n\n    // Function to fetch alumni data\n    async fetchAlumniData(alumniProgram) {\n        const apiUrl = `${site_url}/wp-json/leadership/v1/alumni`;\n\n        try {\n          \n            // Encode the alumni program\n            alumniProgram = encodeURIComponent(alumniProgram);\n\n            // Construct the URL with the alumni_program parameter\n            const url = `${apiUrl}?alumni_program=${alumniProgram}`;\n\n            // Make the GET request\n            const response = await fetch(url, {\n                method: 'GET',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n            });\n\n            // Check if the request was successful\n            if (!response.ok) {\n                throw new Error(`Error: ${response.status} - ${response.statusText}`);\n            }\n\n            // Parse the JSON response\n            const data = await response.json();\n\n            // Access the alumni data\n            const alumniData = data.data.alumnis;\n            this.alumnis[alumniProgram] = alumniData;\n\n            \n\n        } catch (error) {\n            // Handle errors\n            console.error('Error fetching alumni data:', error.message);\n        }\n    }\n\n    // Function to filter alumni based on selected criteria\n    filterAlumni() {\n       \n        this.filteredAlumni = this.alumnis[this.filterGroup];\n\n        if (this.filterMode === 'Year' || this.filterMode === null) {\n            this.filteredAlumni = this.groupArrayByYear(this.filteredAlumni);\n\n            // sort by last name  and first name\n            for (const year in this.filteredAlumni) {\n                if (this.filteredAlumni.hasOwnProperty(year)) {\n                    this.filteredAlumni[year] = this.filteredAlumni[year].sort((a, b) => {\n                        const lastNameA = a.title.split(\" \").reverse()[0];\n                        const lastNameB = b.title.split(\" \").reverse()[0];\n\n                        if (lastNameA === lastNameB) {\n                            // If last names are the same, compare by first name\n                            const firstNameA = a.title.split(\" \")[0];\n                            const firstNameB = b.title.split(\" \")[0];\n                            return firstNameA.localeCompare(firstNameB);\n                        } else {\n                            return lastNameA.localeCompare(lastNameB);\n                        }\n                    });\n                }\n            }\n            \n        } else if (this.filterMode === 'Alphabetically') {\n            this.filteredAlumni = this.groupArrayAlphabetically(this.filteredAlumni);\n        } else if (this.filterMode === 'School') {\n            this.filteredAlumni = this.groupArrayBySchool(this.filteredAlumni);\n\n            // Sort the filtered alumni by school name alphabetically\n            const ordered = {};\n            Object.keys(this.filteredAlumni).sort().forEach(function (key) {\n                ordered[key] = this.filteredAlumni[key];\n            }, this);\n\n            this.filteredAlumni = ordered;\n        } else {\n            this.filteredAlumni = this.groupArrayByYear(this.filteredAlumni);\n        }\n\n        this.displayAlumni();\n    }\n\n    // Function to display alumni on the webpage\n    displayAlumni() {\n     \n\n        // Clear the existing content\n        this.alumniContainer.innerHTML = '';\n        let items_per_row;    \n\n  \n\n        // Loop through the filtered alumni and display them\n        for (const year in this.filteredAlumni) {\n            if (this.filteredAlumni.hasOwnProperty(year)) {\n                \n                const yearGroup = this.filteredAlumni[year];\n                const itemsLength = yearGroup.length;\n                items_per_row = itemsLength <  12 ? 12:  Math.ceil(itemsLength / this.screen_size_mode_handler().screen_size_rows ) ;\n                \n \n\n                // Create year element\n                const yearElement = document.createElement('h2');\n                yearElement.classList.add('leadership-alumni__year');\n                yearElement.textContent = year;\n\n                // Create row element\n                const rowElement = document.createElement('div');\n                rowElement.classList.add('leadership-alumni__row');\n                let columnElement = document.createElement('div');\n                columnElement.classList.add('leadership-alumni__column');\n\n                let i = 0;\n\n                // Loop through alumni in the year group and create elements for each\n                yearGroup.forEach(item => {\n                    if (i % items_per_row === 0) {\n                        // Create a new column every 7 items\n                        if (columnElement.children.length > 0) {\n                            rowElement.appendChild(columnElement.cloneNode(true));\n                        }\n                        columnElement = document.createElement('div');\n                        columnElement.classList.add('leadership-alumni__column');\n                    }\n\n                    // Create item element\n                    const itemElement = document.createElement('li');\n                    itemElement.classList.add('leadership-alumni__item');\n\n                    // Create title element\n                    const titleElement = document.createElement('span');\n                    titleElement.classList.add('leadership-alumni__title');\n\n                    let deceased = item.deceased;\n\n                    // Add 'deceased' class for deceased alumni\n                    if (deceased == 'Yes') {\n                        titleElement.classList.add('deceased');\n                    }\n\n                    titleElement.textContent = item.title.replace(\"&#8217;\", \"'\") + (deceased && \" †\");\n\n                    // Create year element for alphabetically and school filters\n                    const yearElement = document.createElement('span');\n                    if (this.filterMode == 'Alphabetically' || this.filterMode == 'School') {\n                        yearElement.classList.add('leadership-alumni__year');\n                        yearElement.textContent = `(${item.year})`;\n                    }\n\n                    // Append elements to item element\n                    itemElement.appendChild(titleElement);\n                    (this.filterMode == 'Alphabetically' || this.filterMode == 'School') && itemElement.appendChild(yearElement);\n\n                    // Append item element to column element\n                    columnElement.appendChild(itemElement);\n\n                    i++;\n                });\n\n                // Append the last column if not empty\n                if (columnElement.children.length > 0) {\n                    rowElement.appendChild(columnElement);\n                }\n\n                // Append year and row elements to the alumni container\n               this. alumniContainer.appendChild(yearElement);\n               this. alumniContainer.appendChild(rowElement);\n            }\n        }\n\n        // Update page logo based on the current filter group\n        this.pageLogo.src = this.logos[this.filterGroup];\n        // Hide the spinner\n        this.hideSpinner();\n    }\n\n    // Function to group alumni array by year\n    groupArrayByYear(data) {\n        const result = {};\n\n        data.forEach(item => {\n            const year = item.year;\n\n            if (!result[year]) {\n                result[year] = [];\n            }\n\n            result[year].push(item);\n        });\n\n        return result;\n    }\n\n    // Function to group alumni array alphabetically by name\n    groupArrayAlphabetically(data) {\n        const result = {};\n    \n        data.forEach((item, index) => {\n            const name = item.title;\n            const firstLetter = name.charAt(0).toUpperCase();\n            const lastLetter = name.split(\" \").reverse()[0].charAt(0).toUpperCase();\n    \n            if (!result[lastLetter]) {\n                result[lastLetter] = [];\n            }\n    \n            result[lastLetter].push(item);\n        });\n    \n        // Sort the results array keys by alphabet\n        const ordered = {};\n        Object.keys(result).sort().forEach((key) => {\n            // Sort each group by last name first and then first name\n            ordered[key] = result[key].sort((a, b) => {\n                const lastNameA = a.title.split(\" \").reverse()[0];\n                const lastNameB = b.title.split(\" \").reverse()[0];\n    \n                if (lastNameA === lastNameB) {\n                    // If last names are the same, compare by first name\n                    const firstNameA = a.title.split(\" \")[0];\n                    const firstNameB = b.title.split(\" \")[0];\n                    return firstNameA.localeCompare(firstNameB);\n                } else {\n                    return lastNameA.localeCompare(lastNameB);\n                }\n            });\n        });\n    \n        return ordered;\n    }\n    // Function to group alumni array by school\n    groupArrayBySchool(data) {\n        const result = {};\n\n        data.forEach(item => {\n            const school = item.school;\n\n            if (!result[school]) {\n                result[school] = [];\n            }\n\n            result[school].push(item);\n        });\n\n        return result;\n    }\n\n\n     // Function to create and display the spinner\n     displaySpinner() {\n \n\n        // Clear the existing content\n        this.alumniContainer.innerHTML = '';\n     \n        // Check if the spinner already exists\n        if (!this.spinner) {\n            this.spinner = document.createElement('div');\n            this.spinner.classList.add('spinner-container');\n\n            const spinner = document.createElement('div');\n            spinner.classList.add('spinner');\n\n            const loadingText = document.createElement('p');\n            loadingText.classList.add('loading-text');\n            loadingText.textContent = 'Loading';\n\n            const loadingDots = document.createElement('span');\n            loadingDots.id = 'loading-dots';\n\n            loadingText.appendChild(loadingDots);\n            this.spinner.appendChild(spinner);\n            spinner.appendChild(loadingText);\n\n            // Append the spinner to the alumni container\n            this. alumniContainer.appendChild(this.spinner);\n        } else {\n            // If the spinner already exists, just show it\n            this.spinner.style.display = 'flex';\n           this. alumniContainer.appendChild(this.spinner);\n        }\n    }\n\n     // Function to hide the spinner\n     hideSpinner() {\n        if (this.spinner) {\n            // If the spinner exists, hide it\n            this.spinner.style.display = 'none';\n        }\n    }\n\n}\n\n// Initialize the AlumniFilterController\nnew AlumniFilterController('desktop-sort', false);\nnew AlumniFilterController('mobile-sort', true);"],"names":["AlumniFilterController","constructor","screen_version_class","mobile_version","this","document","getElementById","alumniContainer","querySelector","school_filter","no_school_filter","filterButtons","querySelectorAll","filterModeButtons","pageLogo","previous_active_button","previous_active_mode_button","filterMode","filterGroup","filteredAlumni","alumnis","isNoSchoolFilter","logos","site_url","events","init","displaySpinner","fetchAlumniData","filterAlumni","screen_size_mode_handler","mode","rows","window","innerWidth","screen_size_mode","screen_size_rows","forEach","button","addEventListener","async","id","undefined","style","display","previousElementSibling","classList","add","remove","displayAlumni","alumniProgram","apiUrl","url","encodeURIComponent","response","fetch","method","headers","ok","Error","status","statusText","alumniData","json","data","error","console","message","groupArrayByYear","year","hasOwnProperty","sort","a","b","lastNameA","title","split","reverse","lastNameB","firstNameA","firstNameB","localeCompare","groupArrayAlphabetically","groupArrayBySchool","ordered","Object","keys","key","items_per_row","innerHTML","yearGroup","itemsLength","length","Math","ceil","yearElement","createElement","textContent","rowElement","columnElement","i","item","children","appendChild","cloneNode","itemElement","titleElement","deceased","replace","src","hideSpinner","result","push","index","name","lastLetter","charAt","toUpperCase","school","spinner","loadingText","loadingDots"],"sourceRoot":""}